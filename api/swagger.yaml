swagger: "2.0"
info:
  description: "[stock-checker](https://github.com/hr20k/stock-checker)"
  version: "1.0.0"
  title: "Stock Checker"
  contact:
    email: "haruki.private@gmail.com"
host: "localhost:3000"
basePath: "/v1"
tags:
- name: "auth"
- name: "users"
- name: "items"
- name: "tags"
schemes:
- "http"
paths:
  /signup:
    post:
      tags:
      - "auth"
      summary: "Sign Up"
      description: ""
      operationId: "signup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          type: "object"
          properties:
            username:
              type: "string"
            password:
              type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "object"
            properties:
              x-sc-user:
                type: "object"
                properties:
                  id:
                    type: "integer"
                  username:
                    type: "string"
              x-sc-token:
                type: "string"
        400:
          description: "Bad Request"
          schema:
            type: "object"
            properties:
              errorMessage:
                type: "string"
              status:
                type: "integer"
                example: 400
  /login:
    post:
      tags:
      - "auth"
      summary: "Login"
      description: ""
      operationId: "login"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        description: ""
        required: true
        schema:
          type: "object"
          properties:
            username:
              type: "string"
            password:
              type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "object"
            properties:
              x-sc-user:
                type: "object"
                properties:
                  id:
                    type: "integer"
                  username:
                    type: "string"
              x-sc-token:
                type: "string"
        400:
          description: "Bad Request"
          schema:
            type: "object"
            properties:
              errorMessage:
                type: "string"
              status:
                type: "integer"
                example: 400

  /users/:id/password:
    put:
      tags:
      - "users"
      summary: "Change password"
      description: ""
      operationId: "changePassword"
      produces:
      - "application/json"
      parameters:
      - name: "x-sc-token"
        in: "header"
        description: "JWT token"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "User Id"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad Reqeset"
          schema:
            type: "object"
            properties:
              errorMessage:
                type: "string"
              status:
                type: "integer"
                example: 400
        401:
          description: "Unauthorized"
          schema:
            type: "object"
            properties:
              errorMessage:
                type: "string"
              status:
                type: "integer"
                example: 401

  /users/{id}/items:
    get:
      tags:
      - "items"
      summary: "Get all Items"
      description: ""
      operationId: "getAllItems"
      produces:
      - "application/json"
      parameters:
      - name: "x-sc-token"
        in: "header"
        description: "JWT token"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "User Id"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/Item'
        401:
          description: "Unauthorized"
          schema:
            type: "object"
            properties:
              errorMessage:
                type: "string"
              status:
                type: "integer"
                example: 401
    post:
      tags:
      - "items"
      summary: "Create new Item"
      description: ""
      operationId: "createItem"
      produces:
      - "application/json"
      parameters:
      - name: "x-sc-token"
        in: "header"
        description: "JWT token"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "User Id"
        required: true
        type: "integer"
      - name: "body"
        in: "body"
        description: ""
        required: true
        schema:
          type: "object"
          properties:
            item:
              $ref: '#/definitions/PostItem'
            tags:
              type: "array"
              items:
                type: "integer"
      responses:
        201:
          description: "Created"
          headers:
            Location:
              description: "users/:id/items/:itemId"
              type: "string"
        400:
          description: "Bad Request"
          schema:
            type: "object"
            properties:
              errorMessage:
                type: "string"
              status:
                type: "integer"
                example: 400
        401:
          description: "Unauthorized"
          schema:
            type: "object"
            properties:
              errorMessage:
                type: "string"
              status:
                type: "integer"
                example: 401
  
  /users/{id}/items/{itemId}:
    put:
      tags:
      - "items"
      summary: "Update a Item"
      description: ""
      operationId: "updateItem"
      produces:
      - "application/json"
      parameters:
      - name: "x-sc-token"
        in: "header"
        description: "JWT token"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "User Id"
        required: true
        type: "integer"
      - name: "itemId"
        in: "path"
        description: "Item Id"
        required: true
        type: "integer"
      - name: "body"
        in: "body"
        description: ""
        required: true
        schema:
          type: "object"
          properties:
            item:
              $ref: '#/definitions/PostItem'
            tags:
              type: "array"
              items:
                type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/Item'
        401:
          description: "Unauthorized"
          schema:
            type: "object"
            properties:
              errorMessage:
                type: "string"
              status:
                type: "integer"
                example: 401
    delete:
      tags:
      - "items"
      summary: "Delete a Item"
      description: ""
      operationId: "deleteItem"
      parameters:
      - name: "x-sc-token"
        in: "header"
        description: "JWT token"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "User Id"
        required: true
        type: "integer"
      - name: "itemId"
        in: "path"
        description: "Item Id"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
        401:
          description: "Unauthorized"
          schema:
            type: "object"
            properties:
              errorMessage:
                type: "string"
              status:
                type: "integer"
                example: 401

  /users/{id}/tags:
    get:
      tags:
      - "tags"
      summary: "Get all Tags"
      description: ""
      operationId: "getAllTags"
      produces:
      - "application/json"
      parameters:
      - name: "x-sc-token"
        in: "header"
        description: "JWT token"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "User Id"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/Tag'
        401:
          description: "Unauthorized"
          schema:
            type: "object"
            properties:
              errorMessage:
                type: "string"
              status:
                type: "integer"
                example: 401
    post:
      tags:
      - "tags"
      summary: "Create new Tag"
      description: ""
      operationId: "createTag"
      produces:
      - "application/json"
      parameters:
      - name: "x-sc-token"
        in: "header"
        description: "JWT token"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "User Id"
        required: true
        type: "integer"
      - name: "body"
        in: "body"
        description: ""
        required: true
        schema:
          $ref: '#/definitions/PostTag'
      responses:
        201:
          description: "Created"
          headers:
            Location:
              description: "users/:id/tags/:tagId"
              type: "string"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
          schema:
            type: "object"
            properties:
              errorMessage:
                type: "string"
              status:
                type: "integer"
                example: 401

  /users/{id}/tags/{tagId}:
    put:
      tags:
      - "tags"
      summary: "Update a Tag"
      description: ""
      operationId: "updateTag"
      produces:
      - "application/json"
      parameters:
      - name: "x-sc-token"
        in: "header"
        description: "JWT token"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "User Id"
        required: true
        type: "integer"
      - name: "tagId"
        in: "path"
        description: "Tag Id"
        required: true
        type: "integer"
      - name: "body"
        in: "body"
        description: ""
        required: true
        schema:
          $ref: '#/definitions/PostTag'
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/Tag'
        401:
          description: "Unauthorized"
          schema:
            type: "object"
            properties:
              errorMessage:
                type: "string"
              status:
                type: "integer"
                example: 401
    delete:
      tags:
      - "tags"
      summary: "Delete a Tag"
      description: ""
      operationId: "deleteTag"
      parameters:
      - name: "x-sc-token"
        in: "header"
        description: "JWT token"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "User Id"
        required: true
        type: "integer"
      - name: "tagId"
        in: "path"
        description: "Tag Id"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
        401:
          description: "Unauthorized"
          schema:
            type: "object"
            properties:
              errorMessage:
                type: "string"
              status:
                type: "integer"
                example: 401
  
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Item:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      quantity:
        type: "integer"
        format: "int32"
      color:
        type: "string"
      image_url:
        type: "string"
      notes:
        type: "string"
      tags:
        type: "array"
        items:
          $ref: '#/definitions/Tag'
  PostItem:
    type: "object"
    properties:
      userId:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      quantity:
        type: "integer"
        format: "int32"
      color:
        type: "string"
      image_url:
        type: "string"
      notes:
        type: "string"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      color:
        type: "string"
  PostTag:
    type: "object"
    properties:
      name:
        type: "string"
      color:
        type: "string"
  